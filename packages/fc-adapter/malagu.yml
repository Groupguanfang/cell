malagu:
  fc-adapter:
    serveHooks: false
backend: 
  entry: lib/node/${deployConfig.type}-application-entry
deployConfig: 
  name: "${cliContext.prod ? 'release' : 'test'}" # test, pre, release
  profile:
    regions: [ cn-hangzhou ]
  type: custom
  secure: true
  internal: false
  timeout: 600000
  service:
    name: malagu
  function:
    name: ${pkg.name}
    serviceName: ${deployConfig.service.name}
    handler: backend/dist/index.handler
    memorySize: 256
    runtime: "${deployConfig.type == 'custom' ? 'custom' : 'nodejs12'}"
    timeout: 15 # 15s
    instanceConcurrency: 10
    bootstrap: 'node backend/dist/index.js'
  trigger:
    name: ${pkg.name}-${deployConfig.alias.name}
    qualifier: ${deployConfig.alias.name}
    functionName: ${deployConfig.function.name}
    serviceName: ${deployConfig.service.name}
    triggerType: http
    triggerConfig:
      authType: anonymous
      methods: [GET, POST, PUT, DELETE, HEAD, PATCH]
  alias:
    name: ${deployConfig.name}
    serviceName: ${deployConfig.service.name}
  customDomain:
    protocol: HTTP
    certConfig:
      # certName: xxx
      privateKey: "${ env.SSL_KEY ?: 'ssl/domain.key'}"
      certificate: "${ env.SSL_PEM ?: 'ssl/domain.pem'}"
    routeConfig:
      routes:
        - path: '/*'
          serviceName: ${deployConfig.service.name}
          qualifier: ${deployConfig.alias.name}
          functionName: ${deployConfig.function.name}
  apiGateway:
    stage:
      name: ${deployConfig.name}
      desc: 'Released By Malagu'
    group:
      name: malagu
      description: 'Created By Malagu'
    api:
      name: ${deployConfig.function.name|replace('-', '_')}
      visibility: PUBLIC
      description: 'Created By Malagu'
      authType: ANONYMOUS
      requestConfig:
        method: ANY
        protocol: HTTP,HTTPS
        postBodyDescription: ''
        mode: PASSTHROUGH
        path: '${malagu.server.path}*'
      serviceConfig:
        serviceProtocol: FunctionCompute
        serviceTimeout: 20 # 20s
        contentTypeValue: 'application/json; charset=UTF-8'
        functionComputeConfig:
          serviceName: ${deployConfig.service.name}
          functionName: ${deployConfig.function.name}
          qualifier: ${deployConfig.alias.name}
      resultType: PASSTHROUGH